# created from response - used to create database and project
#  should run without error
#  if not, check for decimal, indent, or import issues

import decimal

import logging



logging.getLogger('sqlalchemy.engine.Engine').disabled = True  # remove for additional logging

import sqlalchemy



from sqlalchemy.sql import func  # end imports from system/genai/create_db_models_inserts/create_db_models_prefix.py

from logic_bank.logic_bank import Rule

from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, Boolean, DateTime, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import datetime

Base = declarative_base()

class User(Base):
    """
    description: Represents an end user in the system. Users can send and receive messages 
    and have an account status for administrative actions.
    """
    __tablename__ = 'user'
    id = Column(Integer, primary_key=True, autoincrement=True)
    username = Column(String, nullable=False)
    email = Column(String, nullable=False)
    is_blocked = Column(Boolean, default=False)

class Message(Base):
    """
    description: Stores information about messages sent by and to users. Each message is linked to a specific user.
    """
    __tablename__ = 'message'
    id = Column(Integer, primary_key=True, autoincrement=True)
    content = Column(Text, nullable=False)
    timestamp = Column(DateTime, default=datetime.datetime.now)
    sender_id = Column(Integer, ForeignKey('user.id'), nullable=False)
    receiver_id = Column(Integer, ForeignKey('user.id'), nullable=False)

class Admin(Base):
    """
    description: Represents administrators who have special privileges to oversee communication and manage users.
    """
    __tablename__ = 'admin'
    id = Column(Integer, primary_key=True, autoincrement=True)
    username = Column(String, nullable=False)
    email = Column(String, nullable=False)

class UserReport(Base):
    """
    description: Contains reports generated by admins regarding suspicious or problematic user behavior.
    """
    __tablename__ = 'user_report'
    id = Column(Integer, primary_key=True, autoincrement=True)
    report_content = Column(Text, nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.now)
    reporter_id = Column(Integer, ForeignKey('admin.id'), nullable=False)
    user_id = Column(Integer, ForeignKey('user.id'), nullable=False)

class UserSettings(Base):
    """
    description: Stores customizable settings for users such as notifications preferences and privacy settings.
    """
    __tablename__ = 'user_settings'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('user.id'), nullable=False)
    email_notifications = Column(Boolean, default=True)
    profile_visibility = Column(Boolean, default=True)

class Group(Base):
    """
    description: Represents a group in which multiple users can participate and communicate with each other.
    """
    __tablename__ = 'group'
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.now)

class GroupMember(Base):
    """
    description: Joins users with groups they are part of, managing membership information.
    """
    __tablename__ = 'group_member'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('user.id'), nullable=False)
    group_id = Column(Integer, ForeignKey('group.id'), nullable=False)
    join_date = Column(DateTime, default=datetime.datetime.now)

class GroupMessage(Base):
    """
    description: Stores messages that are sent in groups, linked to the group and the sending user.
    """
    __tablename__ = 'group_message'
    id = Column(Integer, primary_key=True, autoincrement=True)
    content = Column(Text, nullable=False)
    timestamp = Column(DateTime, default=datetime.datetime.now)
    sender_id = Column(Integer, ForeignKey('user.id'), nullable=False)
    group_id = Column(Integer, ForeignKey('group.id'), nullable=False)

class AdminLog(Base):
    """
    description: Tracks actions performed by admins for audit and accountability purposes.
    """
    __tablename__ = 'admin_log'
    id = Column(Integer, primary_key=True, autoincrement=True)
    admin_id = Column(Integer, ForeignKey('admin.id'), nullable=False)
    action = Column(Text, nullable=False)
    timestamp = Column(DateTime, default=datetime.datetime.now)

class Notification(Base):
    """
    description: Represents notifications that alert users about various events and communications.
    """
    __tablename__ = 'notification'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('user.id'), nullable=False)
    message = Column(Text, nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.now)
    is_read = Column(Boolean, default=False)

class UserActivity(Base):
    """
    description: Logs user activity for monitoring and behavior analysis purposes.
    """
    __tablename__ = 'user_activity'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('user.id'), nullable=False)
    activity_type = Column(String, nullable=False)
    timestamp = Column(DateTime, default=datetime.datetime.now)

class UserFeedback(Base):
    """
    description: Collects feedback from users regarding their experience and system improvement suggestions.
    """
    __tablename__ = 'user_feedback'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('user.id'), nullable=False)
    feedback_text = Column(Text, nullable=False)
    submitted_at = Column(DateTime, default=datetime.datetime.now)

# Database setup
engine = create_engine('sqlite:///system/genai/temp/create_db_models.sqlite')
Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()

# Insert sample data
# Users
user1 = User(username='johndoe', email='johndoe@example.com')
user2 = User(username='janesmith', email='janesmith@example.com', is_blocked=True)
user3 = User(username='alicew', email='alicew@example.com')

# Messages
message1 = Message(content="Hello, Jane!", sender_id=1, receiver_id=2)
message2 = Message(content="Hi, John! How are you?", sender_id=2, receiver_id=1)
message3 = Message(content="Good morning, Alice.", sender_id=1, receiver_id=3)

# Admins
admin1 = Admin(username='admin1', email='admin1@system.com')
admin2 = Admin(username='admin2', email='admin2@system.com')

# User Reports
report1 = UserReport(report_content="Suspicious activity observed.", reporter_id=1, user_id=2)

# User Settings
user_settings1 = UserSettings(user_id=1)
user_settings2 = UserSettings(user_id=2, email_notifications=False)

# Groups
group1 = Group(name="Chat Group A")
group2 = Group(name="Chat Group B")

# Group Members
group_member1 = GroupMember(user_id=1, group_id=1)
group_member2 = GroupMember(user_id=2, group_id=2)
group_member3 = GroupMember(user_id=3, group_id=1)

# Group Messages
group_message1 = GroupMessage(content="Welcome to Group A!", sender_id=1, group_id=1)
group_message2 = GroupMessage(content="Glad to be here!", sender_id=3, group_id=1)

# Admin Logs
admin_log1 = AdminLog(admin_id=1, action="Blocked user 2")
admin_log2 = AdminLog(admin_id=2, action="Reviewed user report")

# Notifications
notification1 = Notification(user_id=1, message="You have a new message from Jane.")
notification2 = Notification(user_id=2, message="Your account is now blocked.", is_read=True)

# User Activities
user_activity1 = UserActivity(user_id=1, activity_type="Login")
user_activity2 = UserActivity(user_id=2, activity_type="Message Sent")
user_activity3 = UserActivity(user_id=3, activity_type="Joined Group")

# User Feedback
user_feedback1 = UserFeedback(user_id=1, feedback_text="Great system, very user-friendly.")
user_feedback2 = UserFeedback(user_id=3, feedback_text="I would like more features.")

session.add_all([
    user1, user2, user3,
    message1, message2, message3,
    admin1, admin2,
    report1,
    user_settings1, user_settings2,
    group1, group2,
    group_member1, group_member2, group_member3,
    group_message1, group_message2,
    admin_log1, admin_log2,
    notification1, notification2,
    user_activity1, user_activity2, user_activity3,
    user_feedback1, user_feedback2
])

session.commit()
session.close()
